name: CI/CD Simple Hello World App

on:
  push:
    branches:
      - master
    paths:
      - ".github/**"
      - "frontend/**"
      - "backend/**"

jobs:
  cicd:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set release tag
        id: set_release_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            echo "RELEASE_STATUS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_STATUS=false" >> $GITHUB_ENV
          fi

      - name: Build & Push Frontend Container (Release)
        if: ${{ env.RELEASE_EXISTS == 'true' }}
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-frontend:${{ env.RELEASE_TAG }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/node-frontend:${{ env.RELEASE_TAG }}

      - name: Build & Push Frontend Container (Latest)
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/node-frontend:latest

      - name: Build & Push Backend Container (Release)
        if: ${{ env.RELEASE_EXISTS == 'true' }}
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-backend:${{ env.RELEASE_TAG }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/node-backend:${{ env.RELEASE_TAG }}

      - name: Build & Push Backend Container (Latest)
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/node-backend:latest

      - name: Deploy Backend & Frontend Container
        if: ${{ env.RELEASE_EXISTS == 'true' }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            
            export TF_VAR_docker_username=${{ secrets.DOCKER_USERNAME }}
            export TF_VAR_backend_service_name=${{ secrets.BACKEND_SERVICE_NAME }}
            export TF_VAR_backend_domain=${{ secrets.BACKEND_DOMAIN }}
            export TF_VAR_backend_url=${{ secrets.BACKEND_URL }}
            export TF_VAR_backend_api_key=${{ secrets.SERVER_API_KEY }}
            export TF_VAR_backend_image_tag=${{ env.RELEASE_TAG }}
            export TF_VAR_frontend_domain= ${{ secrets.FRONTEND_DOMAIN }}
            export TF_VAR_frontend_service_name=${{ secrets.FRONTEND_SERVICE_NAME }}
            export TF_VAR_frontend_image_tag=${{ env.RELEASE_TAG }}
            export TF_VAR_frontend_api_token=${{ secrets.SERVER_API_KEY }}

            git clone git@github.com:vourteen14/Zero-One-Group-Skill-Test.git
            cd Zero-One-Group-Skill-Test

            git checkout ${{ env.RELEASE_TAG }}

            cd terraform-swarm
            terraform plan
            terraform apply -auto-approve
          EOF